---
- name: Load OS specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution_major_version }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution|lower }}.yml"
        - "{{ ansible_os_family|lower }}.yml"
        - defaults.yml
      paths:
        - ../vars

- include_vars: group_vars/confluent-community
  when: distro == "cpc"

- name: install confluent community repo
  copy:
    src: confluent.repo
    dest: /etc/yum.repos.d/
  notify: yum-clean-metadata

- name: add gpg key
  rpm-key:
    state: present
    key: https://packages.confluent.io/rpm/5.3/archive.key

- name: clean yum
  yum: 

- name: Ensure required packages are installed (yum)
  yum:
    name: "{{ item }}"
    update_cache: yes
    state: installed
  with_items: "{{ packages|default([]) }}"
  when: ansible_os_family == "RedHat"

- name: Ensure required packages are installed (apt)
  apt:
    name: "{{ item }}"
    update_cache: yes
    state: installed
  with_items: "{{ packages|default([]) }}"
  when: ansible_os_family == "Debian"

- name: Upgrade all packages (yum)
  yum: name=* state=latest
  when: ansible_os_family == "RedHat"

- name: Upgrade all packages (apt)
  apt: upgrade=dist
  when: ansible_os_family == "Debian"

- name: Set nofile limits
  lineinfile: dest=/etc/security/limits.conf
              insertbefore="^# End of file"
              state=present
              line="{{ item }}"
  with_items:
    - "* soft nofile 32768"
    - "* hard nofile 32768"
  when: not azure

- name: Set nproc limits
  lineinfile: dest=/etc/security/limits.d/90-nproc.conf
              insertafter=EOF
              state=present
              create=yes
              line="{{ item }}"
              mode=0644
  with_items:
    - "* soft nproc 32768"
    - "* hard nproc 32768"
  when: not azure

- name: Set swappiness to 1
  sysctl: name=vm.swappiness value=1 state=present ignoreerrors=yes

- name: Set the tuned profile
  copy: src=tuned.conf
        dest=/etc/tuned/kafka/
        mode=0755
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

- name: Activate the tuned profile
  shell: tuned-adm profile kafka
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

- name: Get number of kernels in grub.conf
  shell: grep -E "^[[:blank:]]*kernel" /boot/grub/grub.conf | grep -v transparent_hugepage; exit 0
  register: grep_result
  when: ansible_os_family == "RedHat" and (ansible_distribution == "Amazon" or ansible_distribution_major_version == "6") and not azure
  ignore_errors: true

- name: Disable Transparent Huge Pages in Grub 1
  lineinfile: dest=/boot/grub/grub.conf
              backrefs=True
              state=present
              regexp='(^\s*kernel(\s+(?!transparent_hugepage=never)[\w=/\-\.\,]+)*)\s*$'
              line='\1 transparent_hugepage=never'
  with_items: "{{ grep_result.stdout_lines | default('') }}"
  when: ansible_os_family == "RedHat" and (ansible_distribution == "Amazon" or ansible_distribution_major_version == "6") and not azure


- name: Disable Transparent Huge Pages in Grub 2
  lineinfile: dest=/etc/default/grub
              state=present
              line='GRUB_CMDLINE_LINUX=$GRUB_CMDLINE_LINUX" transparent_hugepage=never"'
  when: ansible_distribution_major_version|int > 6 and not azure
  notify: Run update-grub

- meta: flush_handlers

- name: Disable Transparent Huge Pages until reboot
  shell: echo never > /sys/kernel/mm/transparent_hugepage/enabled && echo never > /sys/kernel/mm/transparent_hugepage/defrag
  ignore_errors: true
  when: not azure

- name: Reconfigure resolv.conf search
  lineinfile: dest={{ resolv_conf }}
              create=yes
              regexp='^search\s+(?! {{ ansible_domain }} ).*$'
              line='search {{ ansible_domain }}'
  when: ansible_domain != "" and not use_dns
  notify: Run resolvconf

- meta: flush_handlers

